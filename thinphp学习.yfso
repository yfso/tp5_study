命名空间：解决函数或类名冲突,随便写,默认使用命名空间下的；同意文件可以有多个命名空间
输出当前命名空间	__NAMESPACE__
-------------------------------------------------------------------------------------------------
跨控制器调用
1.new \app\index\controller\User()
2.use \app\index\controller\User;
3.$model=controller('User');实例化当前模块User控制器,如需要其他模块则 Admin\User
跨方法调用
action('test');action('User\test');action('Admin\User\test');
-------------------------------------------------------------------------------------------------
配置文件主要以数组配置
return[
	'name'=>''
]
惯例 thinkphp\convention.php											一般不修改
应用 application\config.php												主要改这个
扩展 默认两个扩展文件application\database.php	extra\用户自定义		对配置文件分类管理
场景 应用配置里app_status设置,新建配置文件								环境不同是使用
模块 在application\model下新建config.php								解决模块特有配置
动态 通过系统方法或者系统类配置config('name','lyf')	\think\Config::set()

读取配置config()	\think\Config::get()	读取扩展配置 config('扩展文件名.项')
--------------------------------------------------------------------------------------------------
路由

1.绑定模块	index.php只能去前台	admin只能去后台	define('BIND_MODULE','admin')	绑定后不需要写模块名
2.关闭模块路由	\think\App::route(false) 放在引导框架代码之后

tips
1.支持三种方式的URL解析
2.路由只针对应用，不针对模块,若需关闭某些模块需要 \think\App:route(false)
3.用了路由就不能用PATH_INFO

路由模式：普通、混合、强制 url_route_on  url_route_must
设置路由-动态单个注册/批量注册/配置文件批量注册
1.设置路由的文件route.php
2.给路由带参数设置几个参数   必须带参数 /:id 	可选/:[id]	/:id$完全匹配	带额外的参数 ?id=&name=
3.设置请求类型 get post put delete	默认支持所有

资源路由：增删改等6个路由集成

url地址生成
----------------------------------------------------------------------------------------------------
控制器：采用驼峰命名时须在大写字母前加'_'
加载页面:
1.系统类view
2.Controller
3.系统方法view()
config.php中可以设置默认return为html还是json，mc框架可以设置json

控制初始化extends Controller _initialize(),调用任意方法都会先调用这个，主要用于提取控制器下公共代码还有后台权限把控

前置和后置操作
beforeActionList=[];

空控制器
class Error{}
function _empty(){}	主要解决用户恶意操作
网站上线的时候每一个控制器都需要有空操作，每个模块都要有空控制器

使用命令行
在tp5目录下php think 

资源控制器
使用命令行创建控制器
php think make:controller app\index\controller\somethink创建资源路由
----------------------------------------------------------------------------------------------------
页面跳转\thinkphp\library\traits\controller\Jump.php
成功跳转$this->success('跳转成功',url('index/index'));
失败跳转$this->error('登录失败');
默认跳转页面模版在config.php里面修改
-----------------------------------------------------------------------------------------------------
重定向 redirect(url,[id=>,name=>],编号) 301永久 302暂时
-----------------------------------------------------------------------------------------------------
请求类
1.系统函数	request();	2.系统类 Request use think\request;	$request=Requeset::instance();
3.系统控制器类Controller	function getdd(Request $request){echo $request;}
获取域名：dump($request->domain());	除域名外的 $request->url();
获取请求模块、控制器、方法$request->module()/controller()/action()
获取请求类型：$request->method()/type()/ip()/isAjax()
获取所有地址栏参数->param();	->only(['name','pass']);	->except();
判断参数是否有 ->has('id','get');	input('?get.id');
读取 ->get()/input('get.')	

过滤:$request->filter("htmlspecialchars"或者["htmlspecialchars","strip_tags"]);
$request->get('name','','htmlspecialchars,md5');
更改变量：->get(['id'=>20]);
判断请求类型
-----------------------------------------------------------------------------------------------------
数据库
1.tp方法	use think\Db;  $DB=new Db();$DB::table("user")->select();
2.sql语句	$DB::query("select * from");

连接：1.使用database.php配置文件 
2.使用方法配置$DB=Db::connect([]) 
3.$DB=Db::connect("mysql://root:1234@localhost:3306/basename#utf8")
4.模型类定义model中新建protected $connection=[];



















------------------------------------------------------------------------------------------------------
系统类：think\
Config 	Env	Controller  View  Route  Url  Request
系统方法:
config()  view()  controller()  action()  url()  dump()	request()